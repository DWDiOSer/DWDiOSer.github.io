---
layout: post
title: iOS路由层研究与设计
date: 2017-03-20 15:32:24.000000000 +09:00
---

# WangYijian
# WangYijian

## 一.背景简介

### 路由层的概念在服务端是指url请求的分层解析，将一个请求分发到对应的应用处理程序。移动端的路由层则是指将诸如App内页面访问、H5与App访问的访问请求和App间的访问请求，进行分发处理的逻辑层。
### 应用场景
1. H5页面与App原生页面、模块与组件的交互
2. App与App之间的相互访问
3. App内部页面跳转、模块调度与组件加载等
4. 推送与通知系统解除硬编码的逻辑，动态访问原生资源，更好的支持通过通知和推送完成动态页面访问和逻辑执行
5. 为App提供解除业务相互依赖的能力
6. 以组件化为目的的工程改造，隔离各个业务，以制作单独的组件
7. 一个简单的降级思路
8. 在组件间进行相关的埋点等
### 提出需求
1.点我达骑手端之前在最近的版本迭代中加入了登录页的插画需求，同时提出在未来的一些版本迭代中需要支持跳转逻辑，跳转到商城页或者其他APP又或者是App Store中，那么通过路由跳转的方式能不能实现？
2.在JSPatch不能用的情况下，在某些次级页面中发现bug,能否用路由的方式对页面进行降级，降级成H5或者跳转到某些不影响主逻辑的界面？
3.对一些耦合度极高的VC进行解耦？

## 二.路由的思路

首先，路由层在逻辑功能上的设计都是差不多的，路由层解决的核心问题就是原来界面或者组件之间相互调用都必须相互依赖，需要导入目标的头文件、需要清楚目标对象的逻辑，而现在全部都通过路由中转，只依赖路由或者某种通讯协议，或者依靠一些消息传递机制连路由都不依赖。其次，路由的核心逻辑就是目标匹配，对于外部调用的情况来说，URL如何匹配Handler是最为重要的，匹配就必然用到正则表达式。


然后，对于本次课题的一些需求思路。从以下角度去考虑：
### 1.路由需要能够实现被其他模块调度，从而调度另外一个模块
### 2.接入路由的模块不需要知道目标模块的实现
### 3.调度发起方需要有目标的响应回调，类似于http请求，有一个request就要有一个response，才能实现双向的调用
### 4.调用方式需要统一，统一而松散的调用协议和数据协议可以减少大量接入成本和沟通成本

## 三.路由的设计思路的大致框架

首先，Router就是一个实例对象，用来提供给其他的模块调用。之后就是路由层的请求，无论是跨应用的外部调用(H5调用、其他App调用)还是内部调用(内部模块相互调用)，最后都要形成一个路由请求，一个以URL为基础的request对象，首先需要有携带URL，再一个要携带请求所需要的参数，参数有三种，一种是Url上的键值对参数，一种是RESTFul风格的Url上的路径参数，一种是内部调用适用的原生参数。那么，routerRequest是个以URL为基础的实例对象，这里不是直接传URL字符串的主要考虑是，如果路由在内部调用其他模块的时候需要传入一些原生对象，而URL上只能携带类型单一的字符串键值对表示参数，所以需要使用这么一个对象进行包装。
然后，handler层处理一个request请求是一个具有过程性的逻辑，RouteHandler要作为一个基类，这个handler在需要处理获取目标视图控制器->参数传递给目标视图控制器->视图控制器的转场->完成回调这样一个实现思路，所以当路由接收一个routeRequest请求，转发给一个routeHandler处理，处理完毕以后如果有回调，则回调给调用者。URL的请求与Handler的对应关系肯定需要匹配的逻辑。
最后，为了使得路由内部逻辑更加清晰单独使用routeMatcher来处理匹配的逻辑，可以通过传入url和参数，检查是否返回request请求，来表示该routeMatcher对象所拥有的匹配表达式与url是否能够匹配


### 工作流程：
### 1. 首先实例化Router对象
### 2. 实例化Handler或者是Block，通过Router的注册接口使得一个Url的匹配表达式对应一个Handler或者是一个block
### 3. Router内部会将Url的表达式形成一个Matcher对象进行保存，对应的Handler或处理的Block会与Matcher一一对应，怎么对应呢？应该使用路由表达式进行关联
### 4. Router通过handle方法，接收一个Url的请求，内部遍历所有的Matcher对象，将Url和参数转换为Request对象，如果能转换为Request对象则说明能匹配，如果不能则说明该Url不能被路由实体处理
### 5. 拿到Request对象以后，则根据Matcher对应的路由表达式找到对应的Handler或者是Block
### 6. 根据Handler的几个关键方法，传入Request对象，按照顺序完成处理逻辑的触发，最后如果有request当中包含有目标的回调，则将处理结果通过回调的Block响应给调用方法
### 7. Handler完成处理后，Router完成本次路由请求

## 四.git上主流的几个路由的源码分析
关于组件化或者模块化的实现，网上早就有很多的讨论，例如蘑菇街的组件化思路【https://github.com/meili/MGJRouter】 基本就是依靠路由来实现的，以及蘑菇街对应技术的博客【http://limboy.me/tech/2016/03/10/mgj-components.html 】所以简单的来说说git上比较主流的几个路由的源码。

### 1.JLRoutes 【https://github.com/joeldev/JLRoutes 】
首先，JLRoutes把所有对资源的请求都看成一个URI，所谓URI就是个标识不同于URL的地方是URL是URI的子集。JLRoutes中会传入每个字符串，按照一定的规则标准进行分割，取到NSURLComponent,JLRoutes中全局保存一个Map，这个Map以Scheme作为key,JLRoutes为Value,所以在routeControllersMap中的Scheme都是不同。

```
+ (instancetype)routesForScheme:(NSString *)scheme
{
    JLRoutes *routesController = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        routeControllersMap = [[NSMutableDictionary alloc] init];
    });
    
    if (!routeControllersMap[scheme]) {
        routesController = [[self alloc] init];
        routesController.scheme = scheme;
        routeControllersMap[scheme] = routesController;
    } 
    routesController = routeControllersMap[scheme];
    return routesController;
}
```
在每个JLRoutes里面都保存了一个数组，这个数组里面保存了每个路由规则JLRRouteDefinition里面会保存外部传进来的block闭包，pattern，和拆分之后的pattern。

```
- (void)_registerRoute:(NSString *)routePattern priority:(NSUInteger)priority handler:(BOOL (^)(NSDictionary *parameters))handlerBlock
{
    JLRRouteDefinition *route = [[JLRRouteDefinition alloc] initWithScheme:self.scheme pattern:routePattern priority:priority handlerBlock:handlerBlock];

    if (priority == 0 || self.routes.count == 0) {
        [self.routes addObject:route];
    } else {
        NSUInteger index = 0;
        BOOL addedRoute = NO;

        // 找到当前已经存在的一条优先级比当前待插入的路由低的路由
        for (JLRRouteDefinition *existingRoute in [self.routes copy]) {
            if (existingRoute.priority < priority) {
                // 如果找到，就插入数组
                [self.routes insertObject:route atIndex:index];
                addedRoute = YES;
                break;
            }
            index++;
        }
        // 如果没有找到任何一条路由比当前待插入的路由低的路由，或者最后一条路由优先级和当前路由一样，那么就只能插入到最后。
        if (!addedRoute) {
            [self.routes addObject:route];
        }
    }
}
```

根据外部传进来的URL初始化一个JLRRouteRequest，然后用这个JLRRouteRequest在当前的路由数组里面依次request，每个规则都会生成一个response，但是只有符合条件的response才会match，最后取出匹配的JLRRouteResponse拿出其字典parameters里面对应的参数就可以了。查找和匹配过程中重要的代码如下：

```
- (BOOL)_routeURL:(NSURL *)URL withParameters:(NSDictionary *)parameters executeRouteBlock:(BOOL)executeRouteBlock
{
    if (!URL) {
        return NO;
    }
    
    [self _verboseLog:@"Trying to route URL %@", URL];
    
    BOOL didRoute = NO;
    JLRRouteRequest *request = [[JLRRouteRequest alloc] initWithURL:URL];
    
    for (JLRRouteDefinition *route in [self.routes copy]) {
        // check each route for a matching response 检查每个route生成对应的response
        JLRRouteResponse *response = [route routeResponseForRequest:request decodePlusSymbols:shouldDecodePlusSymbols];
        if (!response.isMatch) {
            continue;
        }
        
        [self _verboseLog:@"Successfully matched %@", route];
        
        if (!executeRouteBlock) {
            // if we shouldn't execute but it was a match, we're done now 如果我们被要求不允许执行，但是又找了匹配的路由response
            return YES;
        }
        
        // configure the final parameters 配置参数
        NSMutableDictionary *finalParameters = [NSMutableDictionary dictionary];
        [finalParameters addEntriesFromDictionary:response.parameters];
        [finalParameters addEntriesFromDictionary:parameters];
        [self _verboseLog:@"Final parameters are %@", finalParameters];
        
        didRoute = [route callHandlerBlockWithParameters:finalParameters];
        
        if (didRoute) {
            // if it was routed successfully, we're done
            break;
        }
    }
    
    if (!didRoute) {
        [self _verboseLog:@"Could not find a matching route"];
    }
    
    // if we couldn't find a match and this routes controller specifies to fallback and its also not the global routes controller, then...
    if (!didRoute && self.shouldFallbackToGlobalRoutes && ![self _isGlobalRoutesController]) {
        [self _verboseLog:@"Falling back to global routes..."];
        didRoute = [[JLRoutes globalRoutes] _routeURL:URL withParameters:parameters executeRouteBlock:executeRouteBlock];
    }
    
    // if, after everything, we did not route anything and we have an unmatched URL handler, then call it
    if (!didRoute && executeRouteBlock && self.unmatchedURLHandler) {
        [self _verboseLog:@"Falling back to the unmatched URL handler"];
        self.unmatchedURLHandler(self, URL, parameters);
    }
    
    return didRoute;
}

```


## 2.HHRoutes 【https://github.com/lightory/HHRouter 】
首先，它在ViewController提供了2个方法。map是用来设置路由规则，matchController是用来匹配路由规则的，匹配之后返回对应的UIViewController。

```
- (void)map:(NSString *)route toControllerClass:(Class)controllerClass;
- (void)map:(NSString *)route toBlock:(HHRouterBlock)block;
```

block闭包提供了三个方法，map也是设置路由规则，matchBlock：是用来匹配路由，找到指定的block，但是不会调用该block。callBlock:是找到指定的block，找到以后就立即调用。

```
- (void)map:(NSString *)route toBlock:(HHRouterBlock)block;
- (HHRouterBlock)matchBlock:(NSString *)route;
- (id)callBlock:(NSString *)route;

```

除了上面几种方法外HHRouter还提供了找到不同type的路由规则的方法
`- (HHRouteType)canRoute:(NSString *)route;`
其中routeType为

```
typedef NS_ENUM (NSInteger, HHRouteType) {
    HHRouteTypeNone = 0,
    HHRouteTypeViewController = 1,
    HHRouteTypeBlock = 2
};
```

## 整个HHRouter就是由一个NSMutableDictionary *routes控制的。

```
@interface HHRouter ()
@property (strong, nonatomic) NSMutableDictionary *routes;
@end
```

```
- (void)map:(NSString *)route toBlock:(HHRouterBlock)block
{
    NSMutableDictionary *subRoutes = [self subRoutesToRoute:route];
    subRoutes[@"_"] = [block copy];
}

- (void)map:(NSString *)route toControllerClass:(Class)controllerClass
{
    NSMutableDictionary *subRoutes = [self subRoutesToRoute:route];
    subRoutes[@"_"] = controllerClass;
}
```

这两个方法分别是block闭包和ViewController设置路由规则调用的方法实体。不管是ViewController还是block闭包，设置规则的时候都会调用subRoutesToRoute:方法。然后我们来看subRoutesToRoute:这个方法其实就是来构造路由匹配规则的字典

```
- (NSMutableDictionary *)subRoutesToRoute:(NSString *)route
{
    NSArray *pathComponents = [self pathComponentsFromRoute:route];

    NSInteger index = 0;
    NSMutableDictionary *subRoutes = self.routes;

    while (index < pathComponents.count) {
        NSString *pathComponent = pathComponents[index];
        if (![subRoutes objectForKey:pathComponent]) {
            subRoutes[pathComponent] = [[NSMutableDictionary alloc] init];
        }
        subRoutes = subRoutes[pathComponent];
        index++;
    }

    return subRoutes;
}
```

路由规则字典生成之后，等到匹配的时候就会遍历这个字典。一条新的请求过来后，HHRouter对这条路由的处理方式就是先匹配前面的scheme，如果连scheme都不正确的话，会直接导致后面匹配失败。而具体的路由参数匹配在`- (NSDictionary *)paramsInRoute:(NSString *)route`中

```
//举个例子
[[HHRouter shared] map:@"/user/:userId/"
         toControllerClass:[UserViewController class]];
[[HHRouter shared] map:@"/story/:storyId/"
         toControllerClass:[StoryViewController class]];
[[HHRouter shared] map:@"/user/:userId/story/?a=0"
         toControllerClass:[StoryListViewController class]];


[[[HHRouter shared] matchController:@"hhrouter20://user/1/"] class],
  //解析处来的结果
{
    "controller_class" = UserViewController;
    route = "/user/1/";
    userId = 1;
}
//route里面都会保存传过来的完整的URL。

```
生成的参数字典最终会被绑定到ViewController的Associated Object关联对象上。
这个绑定的过程是在match匹配完成的时候进行的。

```
- (UIViewController *)matchController:(NSString *)route
{
    NSDictionary *params = [self paramsInRoute:route];
    Class controllerClass = params[@"controller_class"];

    UIViewController *viewController = [[controllerClass alloc] init];

    if ([viewController respondsToSelector:@selector(setParams:)]) {
        [viewController performSelector:@selector(setParams:)
                             withObject:[params copy]];
    }
    return viewController;
}
```


## 3.MGJRouter 【https://github.com/meili/MGJRouter 】
## 关于这个库的由来：

JLRoutes 的问题主要在于查找 URL 的实现不够高效，通过遍历而不是匹配。还有就是功能偏多。

HHRouter 的 URL 查找是基于匹配，所以会更高效，MGJRouter 也是采用的这种方法，但它跟 ViewController 绑定地过于紧密，一定程度上降低了灵活性。

其实从数据结构上来看和HHRouter是一样的,

然后,具体的实现思路可以看看他们的技术博客【见本章开头】，这里就不做累述。

## 五.解决问题

1.点我达骑手端之前在最近的版本迭代中加入了登录页的插画需求，同时提出在未来的一些版本迭代中需要支持跳转逻辑，跳转到商城页或者其他APP又或者是App Store中，那么通过路由跳转的方式能不能实现？

[见代码部分]



2.在JSPatch不能用的情况下，在某些次级页面中发现bug,能否用路由的方式对页面进行降级，降级成H5或者跳转到某些不影响主逻辑的界面？


3.对一些耦合度极高的VC进行解耦？

2和3的解决思路是相同的，讲路由层布在工程中可实现。

## 六.缺点以及讨论

首先，URLRoute也许是借鉴前端Router和系统App内跳转的方式想出来的方法。它通过URL来请求资源。不管是哪一方的界面或者组件请求资源的方式就都统一了。URL里面也会带上参数，这样调用什么界面或者组件都可以。
URLRoute的优点很多，最大的优点就是服务器可以动态的控制页面跳转，可以统一处理页面出问题之后的错误处理，可以统一请求方式。
URLRoute方案也是存在一些缺点的，首先URL的map规则是需要注册的，它们会在load方法里面写。写在load方法里面是会影响App启动速度的。
其次是大量的硬编码。URL链接里面关于组件和页面的名字都是硬编码，参数也都是硬编码。而且每个URL参数字段都必须要一个文档进行维护，这个对于业务开发人员也是一个负担。而且URL短连接散落在整个App四处，维护起来实在有点麻烦，虽然蘑菇街想到了用宏统一管理这些链接，但是还是解决不了硬编码的问题。
真正一个好的路由是在无形当中服务整个App的，是一个无感知的过程，从这一点来说，略有点缺失。
最后一个缺点是，对于传递NSObject的参数，URL是不够友好的，它最多是传递一个字典。




